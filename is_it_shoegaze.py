# -*- coding: utf-8 -*-
"""is_it_shoegaze.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15DWoGNyczBXGKFdNLoMyy9NbcrJJbqJT
"""

# !pip install spotipy

from tempfile import TemporaryDirectory
import torch
import torch.nn as nn
import numpy as np

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
cid = '733feec74613475496335bd86b89e056'
print('enter the secret value')
secret = input()

# potential things to analyze:
# thom yorke vs carti lyrics (genius api)
# valence (happiness) vs popularity (data science)
# track features -> genre
# is [x] shoegaze/metal/emo/etc?

client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)

# only_shallow_id = '52UcjsM15hjCQAUbTW2hy1'
# songs = [only_shallow_id]

non_shoegaze_artists = [ #no shoegaze in entire discog!
    'Coldplay',
    'Kendrick Lamar',
    'Taylor Swift',
    'BTS',
    'Fleet Foxes',
    'Kanye West'
]

shoegaze_artists = [ #entire discog must have shoegaze!
    'my bloody valentine',
    'Slowdive',
    'Drop Nineteens',
    'Parannoul',
    'Swervedriver'
]

artists = non_shoegaze_artists + shoegaze_artists

songs = []

for artist in artists:
    results = sp.search(q="artist:" + artist, type="artist")
    artist_id = results['artists']['items'][0]['id']
    # print(artist['name'], artist['genres'])
    albums = sp.artist_albums(artist_id)['items']

    for album in albums:
        album_id = album['id']
        tracks = sp.album_tracks(album_id)['items']
        songs.extend([track['id'] for track in tracks])

# print(songs)

# for each song, make a list of:
# danceability, energy, speechiness, acousticness, instrumentalness, liveness, valence
# 1 if shoegaze, 0 if not

def encode_song(song_id):
    f = sp.audio_features(song_id)[0]
    return np.array([f['danceability'], f['energy'], f['speechiness'], f['acousticness'], f['instrumentalness'], f['liveness'], f['valence']])

def is_shoegaze(song_id):
    # artist_id = sp.track(song_id)['artists'][0]['id']
    # print(artist_id)
    # return int('shoegaze' in sp.artist(artist_id)['genres'])
    artist_name = sp.track(song_id)['artists'][0]['name']
    return int(artist_name in shoegaze_artists)

# print(songs[15:20])

song_data = [encode_song(song) for song in songs]
genres = [is_shoegaze(song) for song in songs]

# print(song_data[40:45])
# print(genres[40:45])

model = nn.Sequential(
  nn.Linear(7, 16),
  nn.ReLU(),
  nn.Linear(16, 16),
  nn.ReLU(),
  nn.Linear(16, 1),
  nn.Sigmoid()
)
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)

data = []
for i in range(len(song_data)):
  data.append((song_data[i], genres[i]))

# print(len(x))
# print(data[60:62])

# import tqdm
for epoch in range(1, 51):
  losses = []
  for x, y in data:
    x = torch.tensor(x).reshape(7).float()
    y = torch.tensor(y).reshape(1).float()

    guess = model(x)

    loss = nn.functional.binary_cross_entropy(guess, y)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()


    losses.append(loss.item())
  if epoch % 10 == 0:
    print("LOSS", np.mean(losses))

def get_genre(name, artist):
  results = sp.search(q="track:" + name + " artist:" + artist, type="track")
  track_id = results['tracks']['items'][0]['id']

  song = encode_song(track_id)
  song = torch.tensor(song).float().reshape(7)

  value = model(song)[0].item()
  probability = round(10000 * value) / 100
  if round(value):
    return f'{name} by {artist} is shoegaze ({probability}% confidence)'
  return f'{name} by {artist} is not shoegaze ({100 - probability}% confidence)'

test_songs = [
    ("New Slaves", 'Kanye West'),
    ("Self Control", 'Frank Ocean'),
    ("Let Down", 'Radiohead'),
    ("Blow Out", 'Radiohead'),
    ('Only Shallow', 'my bloody valentine'),
    ('Heaven or Las Vegas', 'Cocteau Twins'),
    ('Fell in Love (At the Water)', 'Candy Claws'),
    ('Chocolate Matter', 'Sweet Trip'),
    ('Bloodhail', 'Have a Nice Life'),
    ('Vapour Trail', 'Ride'),
    ('Hell of a Life', 'Kanye West'),
    ('Blank Space', 'Taylor Swift'),
    ('Alison', 'Slowdive'),
    ('Sometimes', 'my bloody valentine'),
    ('Beautiful World', 'Parannoul'),
    ('Modern Love Stories', 'Beach House'),
    ('Wesley\'s Theory', 'Kendrick Lamar'),
    ('Pictures of You', 'The Cure'),
    ('Blood Section', 'Swans'),
    ('Ring a Bell', 'Death Grips'),
    ('Total Trash', 'Sonic Youth'),
    ('The Scientist', 'Coldplay'),
    ('Territorial Pissings', 'Nirvana'),
    ('Hard to Explain', 'The Strokes'),
    ('Snow Globes', 'Black Country, New Road')
]

tests = [get_genre(x[0], x[1]) for x in test_songs]
for test in tests:
  print(test)